
package retina.chat.client;

import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.JOptionPane;


public class ChatWindow extends javax.swing.JFrame
{
    private ChatClient parent;

    private String groupname;

    private String conversation = "";

    private Preferences preferences;
    private PreferencesWindow preferencesWindow;

    /** Creates new form ChatWindow */
    public ChatWindow(ChatClient parent, String groupname)
    {
        initComponents();
        this.parent = parent;
        this.groupname = groupname;
        setTitle("Retina: " + groupname);

        // put the window in the middle of the screen
        setLocationRelativeTo(null);

        preferences = new Preferences(Preferences.BLACK, Preferences.MEDIUM);
        preferencesWindow = new PreferencesWindow(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel1 = new javax.swing.JPanel();
        messageTextField = new javax.swing.JTextField();
        sendMessageButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        chatPanelScrollPane = new javax.swing.JScrollPane();
        chatPanel = new javax.swing.JEditorPane();
        memberListPanelScrollPane = new javax.swing.JScrollPane();
        memberListPanel = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                handleKeyReleased(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                windowClosedHandler(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        messageTextField.setText("Please type your message here");
        messageTextField.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                handleKeyReleased(evt);
            }
        });
        messageTextField.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                handleMouseClicked(evt);
            }
        });

        jPanel1.add(messageTextField, java.awt.BorderLayout.CENTER);

        sendMessageButton.setText("Send Message");
        sendMessageButton.setEnabled(false);
        sendMessageButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendMessageHandler(evt);
            }
        });

        jPanel1.add(sendMessageButton, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setMinimumSize(new java.awt.Dimension(400, 200));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(400, 200));
        chatPanelScrollPane.setAutoscrolls(true);
        chatPanelScrollPane.setPreferredSize(new java.awt.Dimension(303, 200));
        chatPanel.setEditable(false);
        chatPanel.setContentType("text/html");
        chatPanel.setMinimumSize(new java.awt.Dimension(300, 200));
        chatPanelScrollPane.setViewportView(chatPanel);

        jSplitPane1.setLeftComponent(chatPanelScrollPane);

        memberListPanel.setEditable(false);
        memberListPanelScrollPane.setViewportView(memberListPanel);

        jSplitPane1.setRightComponent(memberListPanelScrollPane);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents


    private boolean started = false;
    private void handleMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_handleMouseClicked
    {//GEN-HEADEREND:event_handleMouseClicked
        checkIfAnyText();
        if (!started)
        {
            messageTextField.setText("");
            started = true;
        }
    }//GEN-LAST:event_handleMouseClicked

    private void handleKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_handleKeyReleased
    {//GEN-HEADEREND:event_handleKeyReleased
        checkIfAnyText();

        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            sendMessageHandler(null); // it's okay to send null because the event isn't being used
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F7)
        {
            messageTextField.setText("WE ROCK!");
            sendMessageButton.setEnabled(true);
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F2)
        {
            preferencesWindow.setVisible(true);
        }
    }//GEN-LAST:event_handleKeyReleased

    private void checkIfAnyText()
    {
        String message = messageTextField.getText();
        if (message != null && message.length() > 0)
        {
            sendMessageButton.setEnabled(true);
        }
        else
        {
            sendMessageButton.setEnabled(false);
        }
    }

    private void windowClosedHandler(java.awt.event.WindowEvent evt)//GEN-FIRST:event_windowClosedHandler
    {//GEN-HEADEREND:event_windowClosedHandler
        parent.getChatManager().leaveGroup(groupname);

        parent.getGroupManager().removeFromGroup(groupname);
        parent.getChatManager().removeChatWindow(groupname);
    }//GEN-LAST:event_windowClosedHandler

    private void sendMessageHandler(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendMessageHandler
    {//GEN-HEADEREND:event_sendMessageHandler
        String message = messageTextField.getText();

        if (message != null && message.length() > 0)
        {
            String size = "4";
            if (preferences.getSize().equals(Preferences.SMALL)) size = "-1";
            else if (preferences.getSize().equals(Preferences.LARGE)) size = "+1";
            else if (preferences.getSize().equals(Preferences.EXTRA_LARGE)) size = "+2";
            message = "<font size=\"" + size + "\" color=" + preferences.getColor() + ">" + message + "</font>";

            parent.getChatManager().sendChatMessage(groupname, message, this);
        }

        //TESTING
        //refreshWindow();

        messageTextField.setText("");
        sendMessageButton.setEnabled(false);
    }//GEN-LAST:event_sendMessageHandler

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                String serverName = "localhost";
                int serverPortNumber = 4444;
                ChatClient parent = new ChatClient(serverName, serverPortNumber);
                new ChatWindow(parent, "Test Group").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane chatPanel;
    private javax.swing.JScrollPane chatPanelScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea memberListPanel;
    private javax.swing.JScrollPane memberListPanelScrollPane;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JButton sendMessageButton;
    // End of variables declaration//GEN-END:variables

    public void appendChatMessageToChatPanel(String username, String message)
    {
        if (username == null || message == null)
        {
            JOptionPane.showMessageDialog(null, "An error occurred while communicating with the server. Another user sent a chat message but it could not be read.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        appendTextToChatPanel("<b>" + username + ":</b> " + message);
    }

    private void appendTextToChatPanel(String message)
    {
        if (message == null)
        {
            JOptionPane.showMessageDialog(null, "An error occurred while communicating with the server. Another user sent a chat message but it could not be read.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        conversation += message + "<br>";
        chatPanel.setText(conversation);
    }

    public void announceMemberArrival(String username)
    {
        if (username == null)
        {
            JOptionPane.showMessageDialog(null, "An error occurred while communicating with the server. Another user has joined the group but the name could not be read.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        appendTextToChatPanel("<i><b>" + username + "</b> has joined the chat group.</i>");
    }

    public void announceMemberDeparture(String username)
    {
        if (username == null)
        {
            JOptionPane.showMessageDialog(null, "An error occurred while communicating with the server. Another user has left the group but the name could not be read.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        appendTextToChatPanel("<i><b>" + username + "</b> has left the chat group.</i>");
    }

    public void setTextField(String text)
    {
        if (text == null)
        {
            text = "";
        }

        messageTextField.setText(text);
    }

    public void updateGroupMemberListPanel(Vector memberList)
    {
        memberListPanel.setText("");
        if (memberList == null)
        {
            memberListPanel.append(parent.getAuthenticationManager().getUsername());
        }
        else
        {
            for (int i = 0; i < memberList.size(); i++)
            {
                memberListPanel.append((String)(memberList.get(i)));
                memberListPanel.append("\n");
            }
        }
    }

    public String getGroupname()
    {
        return groupname;
    }

    public Preferences getPreferences()
    {
        return preferences;
    }
}
