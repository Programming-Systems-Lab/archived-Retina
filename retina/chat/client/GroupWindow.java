
package retina.chat.client;

import java.awt.Dimension;
import java.util.Vector;
import javax.swing.JOptionPane;

public class GroupWindow extends javax.swing.JFrame
{

    private ChatClient parent;

    /** Creates new form GroupWindow */
    public GroupWindow(ChatClient parent)
    {
        this.parent = parent;
        initComponents();
//        updateGroupList();

        // put the window in the middle of the screen
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Retina: Choose a Group");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                windowClosedHandler(evt);
            }
        });

        jButton1.setText("Join Group");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                joinGroupHandler(evt);
            }
        });

        jPanel4.add(jButton1);

        jButton2.setText("Create Group");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newGroupHandler(evt);
            }
        });

        jPanel4.add(jButton2);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(310, 110));
        jList1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setEnabled(false);
        jList1.setPreferredSize(new java.awt.Dimension(300, 100));
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void windowClosedHandler(java.awt.event.WindowEvent evt)//GEN-FIRST:event_windowClosedHandler
    {//GEN-HEADEREND:event_windowClosedHandler
        parent.getAuthenticationManager().signOut();
        System.exit(0);
    }//GEN-LAST:event_windowClosedHandler

//    int counter = 0;
    private void newGroupHandler(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newGroupHandler
    {//GEN-HEADEREND:event_newGroupHandler
        // show the dialog to create the new group
        String groupname = JOptionPane.showInputDialog(null, "Please enter the name of the new group you want to create:", "Create Group", JOptionPane.PLAIN_MESSAGE);
        if (groupname == null)
            return;

        while (groupname.length() == 0)
        {
            groupname = JOptionPane.showInputDialog(null, "Error: group name cannot be blank.\nPlease enter the name of the new group you want to create:", "Create Group", JOptionPane.ERROR_MESSAGE);
            if (groupname == null)
                return;
        }

        parent.getGroupManager().createAndJoinNewGroup(groupname);

//        Vector groupList = parent.getGroupManager().getGroupList();
//        String newGroupName = "group" + counter++;
//        groupList.add(newGroupName);
//        updateGroupList();
    }//GEN-LAST:event_newGroupHandler

    private void joinGroupHandler(java.awt.event.ActionEvent evt)//GEN-FIRST:event_joinGroupHandler
    {//GEN-HEADEREND:event_joinGroupHandler
        if (parent.getGroupManager().getGroupList().isEmpty())
        {
            // there are no groups to join
            return;
        }

        // need to figure out which group was selected
        if (jList1.getSelectedValue() == null || jList1.getSelectedValue().toString() == null)
        {
            JOptionPane.showMessageDialog(this, "You must select the name of a group to join", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String groupname = jList1.getSelectedValue().toString();

        parent.getGroupManager().joinGroup(groupname);

//        Vector groupList = parent.getGroupManager().getGroupList();
//        groupList.remove(0);
//        updateGroupList();
    }//GEN-LAST:event_joinGroupHandler

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                String serverName = "localhost";
                int serverPortNumber = 4444;
                ChatClient parent = new ChatClient(serverName, serverPortNumber);
                new GroupWindow(parent).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void updateGroupList()
    {
        Vector groupList = parent.getGroupManager().getGroupList();

        if (groupList == null || groupList.isEmpty())
        {
            groupList = new Vector();
            String empty = "There currently are no groups";
            groupList.add(empty);
            jList1.setEnabled(false);
        }
        else
        {
            jList1.setEnabled(true);
        }
        jList1.setListData(groupList);

        if (groupList.size() > 5)
        {
            int estimatedRowHeightInPixels = 20;
            jList1.setPreferredSize(new Dimension(300, groupList.size() * estimatedRowHeightInPixels));
        }
        else
        {
            int originalWindowHeight = 100;  // we should specify this globally, but we don't feel like it. "this is a hack."
            jList1.setPreferredSize(new Dimension(300, originalWindowHeight));
        }
    }
}
